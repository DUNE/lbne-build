#+TITLE: LBNE Plan for Software Installation of LArSoft-based code.
#+AUTHOR: Benjamin Morgan, Brett Viren

* Introduction

LBNE must be able to install its required software from source code on all major collaboration platforms.  The single largest hindrance in satisfying this requirement is the design of the low-level build system of the LArSoft and /art/ packages which provide the major components for the detector simulation portion of the LBNE software stack.  The element of their low-level CMake-based build system that is problematic is the tight entanglement it has with the high-level end-user environment management system ("UPS") as well as a highly complex system of generated and hand written scripts in various languages.  It has been found that this essentially stops any effective contribution to porting the software stack to different platforms (even staying within Linux/GCC) and greatly hinders the ability to build from source on even supported systems. The heart of the problem, this inverted-dependency between the CMake-build and UPS, was pointed out to the /art/ development team in April 2013.  At that time they did not acknowledge it as an actual problem nor have they supported LBNE in trying to address it.

Given that lack of support, and given that, for now it appears LBNE must continue to rely on LArSoft and /art/, LBNE has embarked solving the problem without Fermilab support.  The strategy is in two parts:  The first part is to replace the UPS-entangled CMake files with ones written to use pure-CMake functionality.  The second part is to remove the configuration management logic and data that resided in the UPS-entanglement and move it into a higher-level layer in the form of a Worch configuration.  This strategy has already been proven to work in an initial conversion of the /art/ packages.  The rest of this document describes more about the current status of this effort, a plan for carrying forward this strategy and a rough time-line.

* Current Status

The current status of the purification of the low-level CMake build system is described.  Here the /art/ packages are  =cpp0x=, =cetlib=, =fhicl-cpp= and =messagefacility= and =art= itself.

 - An LBNE GitHub organization has been established[fn:lbne-gh].

 - The /art/ repositories are forked into this organization in a way that "upstream" commits pushed to Fermilab Redmine repositories continue to be tracked.

 - A new =FNALCore= package [fn:fnalcore-gh] is developed that aggregates the /art/ packages (except the =art= package itself) as well as holds their purified CMake files.

 - Purified CMake files are developed for =art= itself in the =fnal-art= repository[fn:fnal-art-gh].

 - The =lbne-build= repository[fn:lbne-build-gh] was created in the LBNE GitHub organization.  It houses a Worch[fn:worch-gh] configuration and tools to build all the 3rd-party external packages, =FNALCore= and =fnal-art= from source.

 - Building these packages with Worch has been tested on at least Ubuntu (14.04) and Scientific Linux (6.4) and in a by-hand manner on Mac OS X.

[fn:lbne-gh] https://github.com/LBNE and links there for the individual =fnal-*= forks.

[fn:fnalcore-gh] https://github.com/LBNE/FNALCore

[fn:fnal-art-gh] https://github.com/LBNE/fnal-art

[fn:lbne-build-gh] https://github.com/LBNE/lbne-build

[fn:worch-gh] https://github.com/brettviren/worch


* Plan

The plan going forward is meant to satisfy these goals:

 - Push the commits of the purified CMake work into "upstream" repositories so that they no longer need to be held in separate tracking forks.

 - Minimize disruption on the user base and provide an partly adiabatic change.

 - Provide time for ongoing testing and improving of the purified CMake files while furthering and allowing the other goals.

The plan is in three major parts:

 1) Continue to apply the CMake purification up through the LArSoft and =lbnecode= packages.  In the same manner as with =fnal-art=, push commits to GitHub in forks which track their upstream repositories and in step add to =lbne-build= support to build each newly purified package.  During this phase, Worch-related development is also needed in order to create UPS binary product "tarballs" from the build results and thus retain user-level status quo in the end.

 2) Change over from GItHub based development to pushing commits to upstream repositories.  Do this by first purifying =lbnecode= as above (and in GitHub) and then porting these changes into the =lbnecode= Redmine git repository with all changes placed behind a "switch" that defaults to the UPS-entangled build.   Factor =lbne-build= to support building this "switched" pure-CMake =lbnecode= package against dependencies provided by UPS.

 3) With acceptance (and hopefully assistance) by the LArSoft group, continue porting the CMake purification, still kept switched off by default, to the LArSoft Redmine repositories and updating =lbne-build= to follow suit.  Then, do likewise for the /art/ packages.  At some suitable point "flip the switch" so the entire stack is built in a pure-CMake manner with Worch.

** Interaction with other efforts

Up until step three, this effort does not interfere with others.  At step three, buy-in by LArSoft and /art/ developers and the Fermilab software builders is required.  However, before even making significant process on step one it must be determined if Fermilab will accept the changes that will be made in steps two and three.  If not accepted, LBNE will revise this plan to remove any inefficiencies and complications that are being retained in order to prop up the Fermilab status quo.  This will likely include removing UPS entirely as an end-user environment management system as it brings significant complexity without commiserate benefits. 

* Timeline

No clue at this moment.


